// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestGymBot.DataAccess;

#nullable disable

namespace TestGymBot.DataAccess.Migrations
{
    [DbContext(typeof(TgBotDbContext))]
    partial class TgBotDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TestGymBot.DataAccess.Entities.PersonEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("ChatId")
                        .HasColumnType("bigint");

                    b.Property<int>("CurrentSession")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PropsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TotalCompletedSession")
                        .HasColumnType("int");

                    b.Property<int>("TotalSession")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PropsId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("TestGymBot.DataAccess.Entities.PersonPropsEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ArmCircumference")
                        .HasColumnType("int");

                    b.Property<int>("BellyGirth")
                        .HasColumnType("int");

                    b.Property<int>("ButtockGirth")
                        .HasColumnType("int");

                    b.Property<int>("ChestСircumference")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfRecording")
                        .HasColumnType("datetime2");

                    b.Property<int>("ForearmGirth")
                        .HasColumnType("int");

                    b.Property<int>("HipGirth")
                        .HasColumnType("int");

                    b.Property<int>("NeckGirth")
                        .HasColumnType("int");

                    b.Property<int>("ShinGirth")
                        .HasColumnType("int");

                    b.Property<int>("ShoulderGirth")
                        .HasColumnType("int");

                    b.Property<int>("WaistCircumference")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PersonProps");
                });

            modelBuilder.Entity("TestGymBot.DataAccess.Entities.RecordEntity", b =>
                {
                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TimeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 7, 14, 19, 0, 33, 433, DateTimeKind.Local).AddTicks(3392));

                    b.Property<Guid?>("PersonEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TimeEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PersonId", "TimeId");

                    b.HasIndex("PersonEntityId");

                    b.HasIndex("TimeEntityId");

                    b.HasIndex("TimeId");

                    b.ToTable("Records", (string)null);
                });

            modelBuilder.Entity("TestGymBot.DataAccess.Entities.TimeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Period")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Times");
                });

            modelBuilder.Entity("TestGymBot.DataAccess.Entities.PersonEntity", b =>
                {
                    b.HasOne("TestGymBot.DataAccess.Entities.PersonPropsEntity", "Props")
                        .WithMany()
                        .HasForeignKey("PropsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Props");
                });

            modelBuilder.Entity("TestGymBot.DataAccess.Entities.RecordEntity", b =>
                {
                    b.HasOne("TestGymBot.DataAccess.Entities.PersonEntity", null)
                        .WithMany("Records")
                        .HasForeignKey("PersonEntityId");

                    b.HasOne("TestGymBot.DataAccess.Entities.PersonEntity", null)
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestGymBot.DataAccess.Entities.TimeEntity", null)
                        .WithMany("Records")
                        .HasForeignKey("TimeEntityId");

                    b.HasOne("TestGymBot.DataAccess.Entities.TimeEntity", null)
                        .WithMany()
                        .HasForeignKey("TimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TestGymBot.DataAccess.Entities.PersonEntity", b =>
                {
                    b.Navigation("Records");
                });

            modelBuilder.Entity("TestGymBot.DataAccess.Entities.TimeEntity", b =>
                {
                    b.Navigation("Records");
                });
#pragma warning restore 612, 618
        }
    }
}
